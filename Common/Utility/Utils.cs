using Amethyst.Common.Diagnostics;
using Amethyst.Common.Extensions;
using Amethyst.Common.Tracking;
using System.Diagnostics;
using System.Text;
using System.Text.RegularExpressions;

namespace Amethyst.Common.Utility
{
    public static partial class Utils
    {
        public static T Benchmark<T>(string name, Func<T> action)
        {
            var sw = Stopwatch.StartNew();
            T res = action();
            sw.Stop();
            Logger.Debug($"[Benchmark] {name} took {sw.Elapsed.TotalMilliseconds:F0} ms");
            return res;
        }

        public static void Benchmark(string name, Action action)
        {
            var sw = Stopwatch.StartNew();
            action();
            sw.Stop();
            Logger.Debug($"[Benchmark] {name} took {sw.Elapsed.TotalMilliseconds:F0} ms");
        }

        [GeneratedRegex(@"^\s*///\s*@\s*(symbolgeneration|symbols)\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase)]
        private static partial Regex SymbolGenerationMarker();

        public static string[] CreateIncludeFile(string includeFile, string inputDir, IEnumerable<FileChange> files)
        {
            List<string> willBeParsed = [];
            var sb = new StringBuilder();
            sb.AppendLine("// This file was generated by Amethyst Symbol Generator.");
            foreach (var header in files)
            {
                if (!SymbolGenerationMarker().Match(File.ReadAllText(header.FilePath)).Success)
                    continue;
                willBeParsed.Add(header.FilePath.NormalizeSlashes());
                sb.AppendLine(@$"#include ""{Path.GetRelativePath(inputDir, header.FilePath).NormalizeSlashes()}""");
            }
            sb.AppendLine("// End of generated file.");
            File.WriteAllText(includeFile, sb.ToString());
            return [.. willBeParsed];
        }

        public static void CreateDefinitionFile(string defFile, IEnumerable<string> mangledNames)
        {
            var sb = new StringBuilder();
            sb.AppendLine("; This file was generated by Amethyst Symbol Generator.");
            sb.AppendLine(@"LIBRARY ""Minecraft.Windows.exe""");
            sb.AppendLine("EXPORTS");
            foreach (var name in mangledNames)
            {
                sb.AppendLine($"    {name}");
            }
            sb.AppendLine("; End of generated file.");
            File.WriteAllText(defFile, sb.ToString());
        }

        public static void WritePrefixedString(this BinaryWriter writer, string str) {
            byte[] bytes = Encoding.UTF8.GetBytes(str);
            writer.Write(bytes.Length);
            writer.Write(bytes);
        }

        public static string ReadPrefixedString(this BinaryReader reader) {
            int length = reader.ReadInt32();
            byte[] bytes = reader.ReadBytes(length);
            return Encoding.UTF8.GetString(bytes);
        }
    }
}
